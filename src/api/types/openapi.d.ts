/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/authentication/begin': {
    /**
     * Begins the authentication process
     * @description Begins the authentication process by providing the public address of the user. System will return a random nonce used for signature validation.
     */
    post: operations['authenticationBegin'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description A Problem Details object (RFC 9457) */
    Problem: {
      /**
       * @description URI reference that identifies the problem type
       * @default about:blank
       */
      type: string;
      /**
       * Format: int32
       * @description HTTP status code generated by the origin server for this occurrence of the problem
       */
      status: number;
      /** @description A short, human-readable summary of the problem type */
      title: string;
      /** @description A human-readable explanation specific to this occurrence of the problem */
      detail?: string;
      /**
       * Format: uri
       * @description URI reference that identifies the specific occurrence of the problem
       */
      instance?: string;
    };
    /**
     * @example {
     *   "type": "about:blank",
     *   "status": 400,
     *   "title": "One or more validation errors occurred",
     *   "errors": [
     *     {
     *       "name": "publicAddress",
     *       "reason": "Public address is required"
     *     },
     *     {
     *       "name": "signature",
     *       "reason": "Signature is required"
     *     }
     *   ]
     * }
     */
    ValidationProblem: {
      /** @description A list of validation errors */
      errors?: components['schemas']['ValidationError'][];
    } & components['schemas']['Problem'];
    ValidationError: {
      /** @description The name of the field that caused the error */
      name?: string;
      /** @description The reason why the field caused the error */
      reason?: string;
    };
    /** @description The public address of the user */
    PublicAddress: string;
    /**
     * @example {
     *   "publicAddress": 1.0480672435017432e+48
     * }
     */
    AuthenticationBeginRequest: {
      publicAddress: components['schemas']['PublicAddress'];
    };
    /**
     * @example {
     *   "publicAddress": 1.0480672435017432e+48,
     *   "nonce": 1311768467294899700
     * }
     */
    AuthenticationBeginResponse: {
      publicAddress: components['schemas']['PublicAddress'];
      /** @description The nonce used for signature validation */
      nonce: string;
    };
  };
  responses: {
    /** @description Request cannot be processed due to malformed request syntax */
    400: {
      content: {
        'application/problem+json': components['schemas']['ValidationProblem'];
      };
    };
    /** @description Request was not processed due to authentication failure */
    401: {
      content: {
        'application/problem+json': components['schemas']['Problem'];
      };
    };
    /** @description Request was not processed due to authorization failure */
    403: {
      content: {
        'application/problem+json': components['schemas']['Problem'];
      };
    };
    /** @description Request was not processed due to resource not found */
    404: {
      content: {
        'application/problem+json': components['schemas']['Problem'];
      };
    };
    /** @description Request was formed correctly but errors ocurred during processing */
    422: {
      content: {
        'application/problem+json': components['schemas']['Problem'];
      };
    };
    /** @description Request was not processed due to an internal server error */
    500: {
      content: {
        'application/problem+json': components['schemas']['Problem'];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Begins the authentication process
   * @description Begins the authentication process by providing the public address of the user. System will return a random nonce used for signature validation.
   */
  authenticationBegin: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['AuthenticationBeginRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AuthenticationBeginResponse'];
        };
      };
      400: components['responses']['400'];
      401: components['responses']['401'];
      422: components['responses']['422'];
      500: components['responses']['500'];
    };
  };
}
